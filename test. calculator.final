import unittest
from unittest.mock import patch
import logging

# Calculator 클래스
class Calculator:
    def add(self, a, b):
        return a + b

    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        return a * b

    def divide(self, a, b):
        if b == 0:
            raise ValueError("0으로 나눌 수 없습니다!")
        return a / b

# 결과를 로그에 기록하는 함수
def log_result(result):
    logging.info(f"Result: {result}")

# 계산을 수행하고 로그에 기록하는 함수
def calculate_and_log(a, b, operation):
    calc = Calculator()
    if operation == "add":
        result = calc.add(a, b)
    elif operation == "subtract":
        result = calc.subtract(a, b)
    elif operation == "multiply":
        result = calc.multiply(a, b)
    elif operation == "divide":
        result = calc.divide(a, b)
    else:
        raise ValueError("알 수 없는 연산입니다")
    log_result(result)
    return result

# 테스트 케이스
class TestCalculator(unittest.TestCase):
    
    def setUp(self):
        self.calc = Calculator()

    def test_add(self):
        self.assertEqual(self.calc.add(1, 2), 3)
        self.assertEqual(self.calc.add(-1, 1), 0)
        self.assertEqual(self.calc.add(-1, -1), -2)

    def test_subtract(self):
        self.assertEqual(self.calc.subtract(2, 1), 1)
        self.assertEqual(self.calc.subtract(-1, 1), -2)
        self.assertEqual(self.calc.subtract(-1, -1), 0)

    def test_multiply(self):
        self.assertEqual(self.calc.multiply(2, 3), 6)
        self.assertEqual(self.calc.multiply(-1, 1), -1)
        self.assertEqual(self.calc.multiply(-1, -1), 1)

    def test_divide(self):
        self.assertEqual(self.calc.divide(6, 3), 2)
        self.assertEqual(self.calc.divide(-1, 1), -1)
        self.assertEqual(self.calc.divide(-1, -1), 1)
        with self.assertRaises(ValueError):
            self.calc.divide(1, 0)

class TestMain(unittest.TestCase):

    @patch('__main__.log_result')
    def test_calculate_and_log(self, mock_log_result):
        self.assertEqual(calculate_and_log(1, 2, "add"), 3)
        mock_log_result.assert_called_once_with(3)

        self.assertEqual(calculate_and_log(3, 1, "subtract"), 2)
        mock_log_result.assert_called_with(2)

        self.assertEqual(calculate_and_log(2, 3, "multiply"), 6)
        mock_log_result.assert_called_with(6)

        self.assertEqual(calculate_and_log(6, 3, "divide"), 2)
        mock_log_result.assert_called_with(2)

        with self.assertRaises(ValueError):
            calculate_and_log(1, 2, "unknown")

if __name__ == '__main__':
    unittest.main()
